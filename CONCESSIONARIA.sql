CREATE TYPE TIPOS_DE_SEXOS AS ENUM ('Masculino', 'Feminino');
CREATE TYPE STATUS_CARROS AS ENUM ('Novo', 'Semi Novo');
CREATE TYPE TIPO_DE_CARROS AS ENUM ('Venda', 'Test Drive');
CREATE TYPE TIPOS_DE_PAGAMENTO AS ENUM ('Dinheiro', 'Cartão', 'Financiamento');
CREATE TYPE TIPOS_DE_TURNO AS ENUM ('Integral', 'Manhã', 'Tarde');

drop type tipos_de_carros;
drop type STATUS_TESTDRIVE;

CREATE TABLE FUNCIONARIO(
COD_FUNC SERIAL NOT NULL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL,
CPF BIGINT NOT NULL,
SEXO TIPOS_DE_SEXOS NOT NULL,
IDADE INT NOT NULL,
QUANT_VENDAS INT DEFAULT 0);

CREATE TABLE CLIENTE(
COD_CLI SERIAL NOT NULL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL,
SEXO TIPOS_DE_SEXOS,
CPF VARCHAR(11) NOT NULL);

CREATE TABLE ENDERECO(
COD_END SERIAL NOT NULL PRIMARY KEY,
RUA VARCHAR(50) NOT NULL,
BAIRRO VARCHAR(50) NOT NULL,
NUMERO INT NOT NULL);

CREATE TABLE CONCESSIONARIA(
COD_CONC SERIAL NOT NULL PRIMARY KEY,
CNPJ INT NOT NULL,
NOME_FANTASIA VARCHAR(50) NOT NULL,
RAZAO_SOCIAL VARCHAR(200),
ENDERECO SERIAL NOT NULL REFERENCES ENDERECO(COD_END)); 

CREATE TABLE MODELO(
COD_MOD SERIAL NOT NULL PRIMARY KEY,
DESCR VARCHAR(50) NOT NULL,
ANO VARCHAR(4),
MARCA VARCHAR(50),
COR VARCHAR(20),
PRECO FLOAT,
ESTOQUE_VENDA INT DEFAULT 0,
ESTOQUE_TEST INT DEFAULT 0);
			
CREATE TABLE FUNCIONARIO_CONCESSIONARIA(
COD_FUNC_CONC SERIAL NOT NULL PRIMARY KEY,       
DATA_DE_ADMISSAO DATE NOT NULL,
DATA_DE_SAIDA DATE,
TURNO TIPOS_DE_TURNO NOT NULL,
COD_FUNC SERIAL NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
COD_CONC SERIAL NOT NULL REFERENCES CONCESSIONARIA(COD_CONC));
														 
CREATE TABLE CARRO(
COD_CAR SERIAL NOT NULL PRIMARY KEY,
CHASSI INT NOT NULL,
KILOMETRAGEM INT NOT NULL,
TIPO TIPO_DE_CARROS NOT NULL,
STATUS STATUS_CARROS NOT NULL,
MODELO SERIAL NOT NULL REFERENCES MODELO(COD_MOD),
CONCESSIONARIA SERIAL NOT NULL REFERENCES CONCESSIONARIA(COD_CONC));
															  
CREATE TABLE ATENDIMENTO(	
COD_ATE SERIAL NOT NULL PRIMARY KEY,
DATA_ATENDIMENTO DATE NOT NULL,
MODELO SERIAL NOT NULL REFERENCES MODELO(COD_MOD),
CLIENTE SERIAL NOT NULL REFERENCES CLIENTE(COD_CLI),
FUNC_CONC SERIAL NOT NULL REFERENCES FUNCIONARIO_CONCESSIONARIA(COD_FUNC_CONC));
															  
CREATE TABLE RESERVA_TEST_DRIVE(
HORA_COMECO TIME NOT NULL,
HORA_FIM TIME NOT NULL,
DIA_RESERVA DATE NOT NULL)
inherits(ATENDIMENTO);
			
CREATE TABLE TEST_DRIVE(
HORA_COMECO TIME NOT NULL,
HORA_FIM TIME NOT NULL,
KILOMETRAGEM_INICIAL INT NOT NULL,
KILOMETRAGEM_FINAL INT NOT NULL,
CARRO SERIAL NOT NULL REFERENCES CARRO(COD_CAR))
inherits(ATENDIMENTO);
			
CREATE TABLE VENDA(
TIPO_DE_PAGAMENTO TIPOS_DE_PAGAMENTO NOT NULL,
CARRO SERIAL NOT NULL REFERENCES CARRO(COD_CAR)
)inherits(ATENDIMENTO);
			
drop table venda,test_drive;
drop table reserva_test_drive,atendimento;
DROP TABLE funcionario_concessionaria,concessionaria,carro,cliente,modelo,funcionario;
ALTER TABLE funcionario ALTER COLUMN cpf TYPE BIGINT;			

# FUNCIONARIO => NOME ÚNICO, CPF VÁLIDO, IDADE VÁLIDA
CREATE OR REPLACE FUNCTION CRIAR_FUNCIONARIO()
RETURNS TRIGGER AS $$
BEGIN
		IF (NEW.IDADE >= 18 AND LENGTH(CAST(NEW.CPF AS VARCHAR))=11) THEN
			IF (TG_OP='UPDATE') THEN
				IF (NEW.NOME != OLD.NOME AND NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;
												
			ELSE
				IF (NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;	
			END IF;
								 
			RETURN NEW;	
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_FUNCIONARIO BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_FUNCIONARIO();
													 
INSERT INTO FUNCIONARIO VALUES(DEFAULT,'MANU',12345678989,'Masculino',20,0)
INSERT INTO FUNCIONARIO VALUES(DEFAULT,'ANA',12345679892,'Masculino',20,0)
SELECT * FROM FUNCIONARIO
								 
# CLIENTE => NOME ÚNICO, CPF VÁLIDO
CREATE OR REPLACE FUNCTION CRIAR_CLIENTE()
RETURNS TRIGGER AS $$
BEGIN
		IF (LENGTH(CAST(NEW.CPF AS VARCHAR))=11) THEN
			IF (TG_OP='UPDATE') THEN
				IF (NEW.NOME != OLD.NOME AND NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;
												
			ELSE
				IF (NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;	
			END IF;
								 
			RETURN NEW;	
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_CLIENTE BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CRIAR_CLIENTE();
								 
# ENDERECO => NÚMERO ÚNICO
CREATE OR REPLACE FUNCTION CRIAR_ENDERECO()
RETURNS TRIGGER AS $$
BEGIN					   
		IF (TG_OP='UPDATE') THEN
				IF (NEW.NUMERO != OLD.NUMERO AND NEW.NUMERO 
					IN (SELECT NUMERO FROM ENDERECO)) THEN
						RAISE EXCEPTION 'Já existe uma concessionária usando esse endereço!';
				END IF;

		ELSE
				IF (NEW.NUMERO IN (SELECT NUMERO FROM ENDERECO)) THEN
						RAISE EXCEPTION 'Já existe uma concessionária usando esse endereço!';
				END IF;				
		END IF;
								 
		RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;
	
CREATE TRIGGER REGRAS_ENDERECO BEFORE INSERT OR UPDATE ON ENDERECO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_ENDERECO();
						 
# CONCESSIONARIA => NOME FANTASIA ÚNICO
CREATE OR REPLACE FUNCTION CRIAR_CONCESSIONARIA()
RETURNS TRIGGER AS $$
BEGIN
		IF (LENGTH(CAST(NEW.CNPJ AS VARCHAR))=11) THEN
			IF (TG_OP='UPDATE') THEN
				IF (NEW.NOME_FANTASIA != OLD.NOME_FANTASIA AND NEW.NOME_FANTASIA 
					IN (SELECT NOME_FANTASIA FROM CONCESSIONARIA)) THEN
						RAISE EXCEPTION 'Não é possível';
				END IF;

				ELSE
					IF (NEW.NOME_FANTASIA IN (SELECT NOME_FANTASIA FROM CONCESSIONARIA)) THEN
						RAISE EXCEPTION 'Não é possível';
					END IF;	
			END IF;
								 
			RETURN NEW;
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_CONCESSIONARIA BEFORE INSERT OR UPDATE ON CONCESSIONARIA
FOR EACH ROW EXECUTE PROCEDURE CRIAR_CONCESSIONARIA();
																
# MODELO => descrição única e preço maior que zero
CREATE OR REPLACE FUNCTION CRIAR_MODELO()
RETURNS TRIGGER AS $$
BEGIN
		IF (NEW.PRECO > 0) THEN 
			IF (TG_OP='INSERT') THEN
				IF (NEW.DESCR IN (SELECT DESCR FROM MODELO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;
			ELSE
				IF (NEW.DESCR != OLD.DESCR AND NEW.DESCR IN (SELECT DESCR FROM MODELO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;	
			END IF;
			
			RETURN NEW;
		END IF;
			
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;
			
CREATE TRIGGER REGRAS_MODELO BEFORE INSERT OR UPDATE ON MODELO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_MODELO();
															 
# FUNC_CONC => IMPEDIR O FUNCIONARIO TRABALHAR EM MAIS DE UM LUGAR AO MESMO TEMPO
CREATE OR REPLACE FUNCTION CRIAR_FUNC_CONC()
RETURNS TRIGGER AS $$
DECLARE
		ANTES_FUNC INT;
BEGIN
		IF (TG_OP='INSERT') THEN
			IF (NEW.COD_FUNC IN (SELECT COD_FUNC INTO ANTES_FUNC FROM 
								 FUNCIONARIO_CONCESSIONARIA)) THEN
				IF ((SELECT TURNO FROM FUNCIONARIO_CONCESSIONARIA WHERE COD_FUNC= ANTES_FUNC) =
						NEW.TURNO) THEN
					RAISE EXCEPTION 'Funcionário já trabalha neste horário!';
				END IF;
			END IF;
		ELSE
			IF (NEW.COD_FUNC != OLD.COD_FUNC AND NEW.COD_FUNC IN (SELECT COD_FUNC INTO 
																  ANTES_FUNC FROM FUNCIONARIO_CONCESSIONARIA)) 
																  THEN
				IF ((SELECT TURNO FROM FUNCIONARIO_CONCESSIONARIA WHERE COD_FUNC= ANTES_FUNC) =
						NEW.TURNO) THEN
					RAISE EXCEPTION 'Funcionário já trabalha neste horário!';
				END IF;
			END IF;	
		END IF;
			
		RETURN NEW;		
		
END;
$$ LANGUAGE PLPGSQL;
			
CREATE TRIGGER REGRAS_FUNC_CONC BEFORE INSERT OR UPDATE ON FUNCIONARIO_CONCESSIONARIA
FOR EACH ROW EXECUTE PROCEDURE CRIAR_FUNC_CONC();
										   
DROP TRIGGER REGRAS_CLIENTE ON CLIENTE;
DROP FUNCTION CRIAR_CLIENTE();
										   
INSERT INTO MODELO VALUES(1,'MODELO VELHO','2011','FIAT','AZUL',15000,5);
INSERT INTO MODELO VALUES(DEFAULT,'MODELO NOVO','2011','FIAT','AZUL',15000,5);
INSERT INTO MODELO VALUES(3,'MODELO AHH','2011','FIAT','AZUL',-2000,5);
INSERT INTO MODELO VALUES(DEFAULT,'MODELO AHH','2011','FIAT','AZUL',2000,5);
SELECT * FROM MODELO
UPDATE MODELO SET DESCR='MODELO NOVO' WHERE DESCR='MODELO USADO';
															 
# CARRO => CHASSI VÁLIDA, TIPO VERIFICADO
CREATE OR REPLACE FUNCTION CRIAR_CARRO()
RETURNS TRIGGER AS $$
BEGIN
		IF (LENGTH(CAST(NEW.CHASSI AS VARCHAR))=17) THEN
			IF (NEW.TIPO='Novo' AND NEW.KILOMETRAGEM > 0) THEN
				RAISE EXCEPTION 'Não é possível';
			END IF;
				   
			RETURN NEW;	
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_CARRO BEFORE INSERT OR UPDATE ON CARRO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_CARRO();
				   
				   
# FUNÇÕES DE ATENDIMENTO RESERVA
CREATE OR REPLACE FUNCTION FAZER_RESERVA_TEST_DRIVE(MOD_NOME VARCHAR(50), CLI_NOME VARCHAR(50),
							FUNC_NOME VARCHAR(50), CONC_NOME VARCHAR(50), HR_COMECO TIME, DIA DATE)
RETURNS VOID AS $$
DECLARE
		ESTOQUE_CAR INT;
		CODIGO_MOD INT;
		CODIGO_CLI INT;
		CODIGO_FUNC INT;
		CODIGO_CONC INT;
		CODIGO_FUNC_CONC INT;
		FUNC_INVALIDO INT;
		INDISPONIBILIDADE INT;
BEGIN
		SELECT ESTOQUE_TEST INTO ESTOQUE_CAR FROM MODELO WHERE DESCR ILIKE MOD_NOME;
		SELECT COD_MOD INTO CODIGO_MOD FROM MODELO WHERE DESCR ILIKE MOD_NOME;
		SELECT COD_CLI INTO CODIGO_CLI FROM CLIENTE WHERE NOME ILIKE CLI_NOME;
		SELECT COD_FUNC INTO CODIGO_FUNC FROM FUNCIONARIO WHERE NOME ILIKE FUNC_NOME;
		SELECT COD_CONC INTO CODIGO_CONC FROM CONCESSIONARIA WHERE NOME_FANTASIA ILIKE CONC_NOME;
		SELECT COD_FUNC_CONC INTO CODIGO_FUNC_CONC FROM FUNCIONARIO_CONCESSIONARIA 
			WHERE CODIGO_FUNC=COD_FUNC AND CODIGO_CONC=COD_CONC;
		SELECT DATA_DE_SAIDA INTO FUNC_INVALIDO FROM FUNCIONARIO_CONCESSIONARIA WHERE 
			COD_FUNC_CONC=CODIGO_FUNC_CONC;
				   
		IF (ESTOQUE_CAR <= 0) THEN
			SELECT COUNT(*) INTO INDISPONIBILIDADE FROM RESERVA_TEST_DRIVE WHERE HORA_FIM >
				   HR_COMECO AND DIA_RESERVA=DIA;
			IF (INDISPONIBILIDADE > 0) THEN
				   RAISE EXCEPTION 'Este horário não está disponível para este modelo de carro';
			END IF;
		END IF;
		IF (FUNC_VALIDO IS NOT NULL) THEN
			RAISE EXCEPTION 'Esse funcionário está incorreto';
		END IF;
		
		UPDATE MODELO SET ESTOQUE_TEST=ESTOQUE_TEST-1 WHERE COD_MODELO=CODIGO_MODELO;
		INSERT INTO RESERVA_TEST_DRIVE VALUES(HR_COMECO, HR_COMECO + 1, DIA);
		INSERT INTO ATENDIMENTO VALUES(DEFAULT, NOW(), CODIGO_MOD, CODIGO_CLI,
									  CODIGO_FUNC_CONC);
				   
END;		
$$ LANGUAGE PLPGSQL;				   
drop function FAZER_RESERVA_TEST_DRIVE(VARCHAR(50),VARCHAR(50),VARCHAR(50),VARCHAR(50),TIME,DATE)
drop function FAZER_RESERVA_TEST_DRIVE(VARCHAR(50),VARCHAR(50),VARCHAR(50),VARCHAR(50),TIME,time,DATE,status_testdrive)	
				   
# FUNÇÕES DE ATENDIMENTO TEST DRIVE				   
CREATE OR REPLACE FUNCTION FAZER_TEST_DRIVE(MOD_NOME VARCHAR(50), CLI_NOME VARCHAR(50),
							FUNC_NOME VARCHAR(50), CONC_NOME VARCHAR(50), HR_COMECO TIME, 
							KILO_INI INT)
RETURNS VOID AS $$
DECLARE
		ESTOQUE_CAR INT;
		CODIGO_MOD INT;
		CODIGO_CLI INT;
		CODIGO_FUNC INT;
		CODIGO_CONC INT;
		CODIGO_FUNC_CONC INT;
		FUNC_INVALIDO INT;
		CLIENTE_RESERVA INT;
BEGIN
		SELECT ESTOQUE_TEST INTO ESTOQUE_CAR FROM MODELO WHERE DESCR ILIKE MOD_NOME;
		SELECT COD_MOD INTO CODIGO_MOD FROM MODELO WHERE DESCR ILIKE MOD_NOME;
		SELECT COD_CLI INTO CODIGO_CLI FROM CLIENTE WHERE NOME ILIKE CLI_NOME;
		SELECT COD_FUNC INTO CODIGO_FUNC FROM FUNCIONARIO WHERE NOME ILIKE FUNC_NOME;
		SELECT COD_CONC INTO CODIGO_CONC FROM CONCESSIONARIA WHERE NOME_FANTASIA ILIKE CONC_NOME;
		SELECT COD_FUNC_CONC INTO CODIGO_FUNC_CONC FROM FUNCIONARIO_CONCESSIONARIA 
			WHERE CODIGO_FUNC=COD_FUNC AND CODIGO_CONC=COD_CONC;
		SELECT DATA_DE_SAIDA INTO FUNC_INVALIDO FROM FUNCIONARIO_CONCESSIONARIA WHERE 
			COD_FUNC_CONC=CODIGO_FUNC_CONC;
		SELECT CLIENTE INTO CLIENTE_RESERVA FROM RESERVA_TEST_DRIVE WHERE HORA_COMECO=HR_COMECO AND
			DIA_RESERVA=DAY;
				   
		IF (ESTOQUE_CAR <= 0) THEN
			IF (CLIENTE_RESERVA IS NOT NULL)THEN
				IF (CODIGO_CLI != CLIENTE_RESERVA) THEN
					RAISE EXCEPTION 'Esse horário está indisponível';
				END IF;
			END IF;
		END IF;
		IF (FUNC_VALIDO IS NOT NULL) THEN
			RAISE EXCEPTION 'Esse funcionário está incorreto';
		END IF;
		IF (TEST_OCUPADO > 0) THEN
			RAISE EXCEPTION 'Esse horário está indisponível';
		END IF;
						   
		INSERT INTO TEST_DRIVE VALUES(HR_COMECO, HR_FIM, KILO_INI);
		INSERT INTO ATENDIMENTO VALUES(DEFAULT, NOW(), CODIGO_MOD, CODIGO_CLI, CODIGO_FUNC_CONC);
				   
END;			
$$ LANGUAGE PLPGSQL;
							   
# FUNÇÕES DE ATENDIMENTO VENDA			   
CREATE OR REPLACE FUNCTION FAZER_VENDA(MOD_NOME VARCHAR(50), CLI_NOME VARCHAR(50),
							FUNC_NOME VARCHAR(50), CONC_NOME VARCHAR(50), TIPO TIPOS_DE_PAGAMENTO,
							CHASSI_CAR INT)
RETURNS VOID AS $$
DECLARE
		ESTOQUE_CAR INT;
		CODIGO_MOD INT;
		CODIGO_CLI INT;
		CODIGO_FUNC INT;
		CODIGO_CONC INT;
		CODIGO_FUNC_CONC INT;
		CODIGO_CAR INT;
		FUNC_INVALIDO INT;
BEGIN
		SELECT ESTOQUE_VENDA INTO ESTOQUE_CAR FROM MODELO WHERE DESCR ILIKE MOD_NOME;
		SELECT COD_MOD INTO CODIGO_MOD FROM MODELO WHERE DESCR ILIKE MOD_NOME;
		SELECT COD_CLI INTO CODIGO_CLI FROM CLIENTE WHERE NOME ILIKE CLI_NOME;
		SELECT COD_FUNC INTO CODIGO_FUNC FROM FUNCIONARIO WHERE NOME ILIKE FUNC_NOME;
		SELECT COD_CONC INTO CODIGO_CONC FROM CONCESSIONARIA WHERE NOME_FANTASIA ILIKE CONC_NOME;
		SELECT COD_FUNC_CONC INTO CODIGO_FUNC_CONC FROM FUNCIONARIO_CONCESSIONARIA 
			WHERE CODIGO_FUNC=COD_FUNC AND CODIGO_CONC=COD_CONC;
		SELECT COD_CAR INTO CODIGO_CAR FROM CARRO WHERE CHASSI=CHASSI_CAR;
		SELECT DATA_DE_SAIDA INTO FUNC_INVALIDO FROM FUNCIONARIO_CONCESSIONARIA WHERE 
			COD_FUNC_CONC=CODIGO_FUNC_CONC;
				   
		IF (FUNC_VALIDO IS NOT NULL) THEN
			RAISE EXCEPTION 'Esse funcionário está incorreto';
		END IF;
		IF (ESTOQUE_CAR <= 0) THEN
			RAISE EXCEPTION 'Modelo em falta';
		ELSE
			UPDATE MODELO SET ESTOQUE_VENDA=ESTOQUE_VENDA-1 WHERE COD_MOD=CODIGO_MODELO;
		END IF;
			
		UPDATE FUNCIONARIO SET QUANT_VENDAS=QUANT_VENDAS+1 WHERE COD_FUNC=CODIGO_FUNCIONARIO;
		INSERT INTO VENDA VALUES(TIPO, CODIGO_CARRO);
		INSERT INTO ATENDIMENTO VALUES(DEFAULT, NOW(), CODIGO_MOD, CODIGO_CLI, CODIGO_FUNC_CONC);
				   
END;			
$$ LANGUAGE PLPGSQL;

#FUNÇÃO CONCESSIONÁRIA		
CREATE OR REPLACE FUNCTION INSERIR_CONCESSIONARIA(CNPJ INT, NOME_FANTASIA VARCHAR(50), RAZAO_SOCIAL VARCHAR(200),
							RUA_CONC VARCHAR(50), BAIRRO_CONC VARCHAR(50), NUMERO_CONC INT)	
RETURNS VOID AS $$
DECLARE
	COD_ENDERECO INT;
BEGIN
	INSERT INTO ENDERECO VALUES(DEFAULT, RUA_CONC, BAIRRO_CONC, NUMERO_CONC);
	SELECT COD_END INTO COD_ENDERECO FROM ENDERECO WHERE NUMERO = NUMERO_CONC;
	INSERT INTO CONCESSIONARIA VALUES(DEFAULT, CNPJ, NOME_FANTASIA, RAZAO_SOCIAL, COD_ENDERECO);
END;
$$ LANGUAGE PLPGSQL;
				   
#FUNÇÃO FUNCIONÁRIO	
CREATE OR REPLACE FUNCTION INSERIR_FUNCIONARIO(NOME VARCHAR(50), CPF BIGINT, SEXO TIPOS_DE_SEXOS, IDADE INT)	
RETURNS VOID AS $$
BEGIN
	INSERT INTO FUNCIONARIO VALUES(DEFAULT,NOME,CPF,SEXO,IDADE,DEFAULT);
END;
$$ LANGUAGE PLPGSQL;
				   
#FUNÇÃO CLIENTE	
CREATE OR REPLACE FUNCTION INSERIR_CLIENTE(NOME VARCHAR(50), SEXO TIPOS_DE_SEXOS, CPF BIGINT)	
RETURNS VOID AS $$
BEGIN
	INSERT INTO CLIENTE VALUES(DEFAULT,NOME,SEXO,IDADE,CPF);
END;
$$ LANGUAGE PLPGSQL;
				   
#FUNÇÃO MODELO	
CREATE OR REPLACE FUNCTION INSERIR_MODELO(DESCR VARCHAR(50), ANO VARCHAR(4), MARCA VARCHAR(50), 
										  COR VARCHAR(20), PRECO FLOAT)	
RETURNS VOID AS $$
BEGIN
	INSERT INTO MODELO VALUES(DEFAULT,DESCR,ANO,MARCA,COR,PRECO,DEFAULT,DEFAULT);
END;
$$ LANGUAGE PLPGSQL;

#FUNÇÃO CARRO
CREATE OR REPLACE FUNCTION INSERIR_CARRO(CHASSI INT, KM INT, TIPO TIPO_DE_CARROS, 
										 STATUS STATUS_CARROS, MOD_NOME VARCHAR(50), CONC_NOME VARCHAR(50))	
RETURNS VOID AS $$
DECLARE 
		CODIGO_MOD INT;
		CODIGO_CONC INT;
BEGIN
	SELECT COD_MOD INTO CODIGO_MOD FROM MODELO WHERE DESCR=MOD_NOME;
	SELECT COD_CONC INTO CODIGO_CONC FROM CONCESSIONARIA WHERE NOME_FANTASIA=CONC_NOMEM;
				   
	INSERT INTO CARRO VALUES(DEFAULT,CHASSI,KM,TIPO,STATUS,CODIGO_MOD,CODIGO_MOD);
	
	IF (TIPO='Venda') THEN
		UPDATE MODELO SET ESTOQUE_VENDA=ESTOQUE_VENDA+1 WHERE COD_MOD=CODIGO_MOD;
	ELSE
		UPDATE MODELO SET ESTOQUE_TEST=ESTOQUE_TEST+1 WHERE COD_MOD=CODIGO_MOD;
	END IF;
																									   
END;
$$ LANGUAGE PLPGSQL;
			
			
			