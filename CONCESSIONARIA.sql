CREATE TYPE TIPOS_DE_SEXOS AS ENUM ('Masculino', 'Feminino');
CREATE TYPE TIPOS_DE_CARROS AS ENUM ('Novo', 'Semi Novo');
CREATE TYPE STATUS_TESTDRIVE AS ENUM ('Pendente', 'Cancelado', 'Cancelado por falta');
CREATE TYPE TIPOS_DE_PAGAMENTO AS ENUM ('Dinheiro', 'Cartão', 'Financiamento');

CREATE TABLE FUNCIONARIO(
COD_FUNC SERIAL NOT NULL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL,
CPF BIGINT NOT NULL,
SEXO TIPOS_DE_SEXOS NOT NULL,
IDADE INT NOT NULL,
QUANT_VENDAS INT NOT NULL);

CREATE TABLE CLIENTE(
COD_CLI SERIAL NOT NULL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL,
SEXO TIPOS_DE_SEXOS,
CPF VARCHAR(11) NOT NULL);

CREATE TABLE CONCESSIONARIA(
COD_CONC SERIAL NOT NULL PRIMARY KEY,
CNPJ INT NOT NULL,
NOME_FANTASIA VARCHAR(50) NOT NULL,
RAZAO_SOCIAL VARCHAR(200),
ENDERECO VARCHAR(500)); 

CREATE TABLE MODELO(
COD_MOD SERIAL NOT NULL PRIMARY KEY,
DESCR VARCHAR(50) NOT NULL,
ANO VARCHAR(4),
MARCA VARCHAR(50),
COR VARCHAR(20),
PRECO FLOAT,
ESTOQUE INT NOT NULL);
			
CREATE TABLE FUNCIONARIO_CONCESSIONARIA(
COD_FUNC_CONC SERIAL NOT NULL PRIMARY KEY,
DATA_DE_ADMISSAO DATE NOT NULL,
DATA_DE_SAIDA DATE,
STATUS BOOL NOT NULL,
COD_FUNC SERIAL NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
COD_CONC SERIAL NOT NULL REFERENCES CONCESSIONARIA(COD_CONC));
														 
CREATE TABLE CARRO(
COD_CAR SERIAL NOT NULL PRIMARY KEY,
CHASSI INT NOT NULL,
KILOMETRAGEM INT NOT NULL,
TIPO TIPOS_DE_CARROS,
MODELO SERIAL NOT NULL REFERENCES MODELO(COD_MOD),
CONCESSIONARIA SERIAL NOT NULL REFERENCES CONCESSIONARIA(COD_CONC));
															  
CREATE TABLE ATENDIMENTO(	
COD_ATE SERIAL NOT NULL PRIMARY KEY,
DATA_ATENDIMENTO DATE NOT NULL,
MODELO SERIAL NOT NULL REFERENCES MODELO(COD_MOD),
CLIENTE SERIAL NOT NULL REFERENCES CLIENTE(COD_CLI),
FUNC_CONC SERIAL NOT NULL REFERENCES FUNCIONARIO_CONCESSIONARIA(COD_FUNC_CONC));
															  
CREATE TABLE RESERVA_TEST_DRIVE(
HORA_COMECO TIME NOT NULL,
HORA_FIM TIME NOT NULL,
DIA_RESERVA DATE NOT NULL,
STATUS STATUS_TESTDRIVE NOT NULL)
inherits(ATENDIMENTO);
			
CREATE TABLE TEST_DRIVE(
HORA_COMECO TIME NOT NULL,
HORA_FIM TIME NOT NULL,
KILOMETRAGEM_INICIAL INT NOT NULL,
KILOMETRAGEM_FINAL INT NOT NULL,
CARRO SERIAL NOT NULL REFERENCES CARRO(COD_CAR))
inherits(ATENDIMENTO);
			
CREATE TABLE VENDA(
TIPO_DE_PAGAMENTO TIPOS_DE_PAGAMENTO NOT NULL,
CARRO SERIAL NOT NULL REFERENCES CARRO(COD_CAR)
)inherits(ATENDIMENTO);
			
drop table venda,test_drive;
drop table reserva_test_drive,atendimento;
DROP TABLE funcionario_concessionaria,carro,modelo,concessionaria,cliente,funcionario;
ALTER TABLE funcionario ALTER COLUMN cpf TYPE BIGINT;			

# FUNCIONARIO => NOME ÚNICO, CPF VÁLIDO, IDADE VÁLIDA
CREATE OR REPLACE FUNCTION CRIAR_FUNCIONARIO()
RETURNS TRIGGER AS $$
BEGIN
		IF (NEW.IDADE >= 18 AND LENGTH(CAST(NEW.CPF AS VARCHAR))=11) THEN
			IF (TG_OP='UPDATE') THEN
				IF (NEW.NOME != OLD.NOME AND NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;
												
			ELSE
				IF (NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;	
			END IF;
								 
			RETURN NEW;	
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_FUNCIONARIO BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_FUNCIONARIO();
													 
INSERT INTO FUNCIONARIO VALUES(DEFAULT,'MANU',12345678989,'Masculino',20,0)
INSERT INTO FUNCIONARIO VALUES(DEFAULT,'ANA',12345679892,'Masculino',20,0)
SELECT * FROM FUNCIONARIO
								 
# CLIENTE => NOME ÚNICO, CPF VÁLIDO
CREATE OR REPLACE FUNCTION CRIAR_CLIENTE()
RETURNS TRIGGER AS $$
BEGIN
		IF (LENGTH(CAST(NEW.CPF AS VARCHAR))=11) THEN
			IF (TG_OP='UPDATE') THEN
				IF (NEW.NOME != OLD.NOME AND NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;
												
			ELSE
				IF (NEW.NOME IN (SELECT NOME FROM FUNCIONARIO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;	
			END IF;
								 
			RETURN NEW;	
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_CLIENTE BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CRIAR_CLIENTE();
								 
# CONCESSIONARIA => NOME FANTASIA ÚNICO
CREATE OR REPLACE FUNCTION CRIAR_CONCESSIONARIA()
RETURNS TRIGGER AS $$
BEGIN
		IF (LENGTH(CAST(NEW.CNPJ AS VARCHAR))=11) THEN
			IF (TG_OP='UPDATE') THEN
				IF (NEW.NOME_FANTASIA != OLD.NOME_FANTASIA AND NEW.NOME_FANTASIA 
					IN (SELECT NOME_FANTASIA FROM CONCESSIONARIA)) THEN
						RAISE EXCEPTION 'Não é possível';
					END IF;

				ELSE
					IF (NEW.NOME_FANTASIA IN (SELECT NOME_FANTASIA FROM CONCESSIONARIA)) THEN
						RAISE EXCEPTION 'Não é possível';
					END IF;	
				END IF;
								 
			RETURN NEW;
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_CONCESSIONARIA BEFORE INSERT OR UPDATE ON CONCESSIONARIA
FOR EACH ROW EXECUTE PROCEDURE CRIAR_CONCESSIONARIA();
																
# MODELO => descrição única e preço maior que zero
CREATE OR REPLACE FUNCTION CRIAR_MODELO()
RETURNS TRIGGER AS $$
BEGIN
		IF (NEW.PRECO > 0) THEN 
			IF (TG_OP='INSERT') THEN
				IF (NEW.DESCR IN (SELECT DESCR FROM MODELO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;
			ELSE
				IF (NEW.DESCR != OLD.DESCR AND NEW.DESCR IN (SELECT DESCR FROM MODELO)) THEN
					RAISE EXCEPTION 'Não é possível';
				END IF;	
			END IF;
			
			RETURN NEW;
		END IF;
			
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;
			
CREATE TRIGGER REGRAS_MODELO BEFORE INSERT OR UPDATE ON MODELO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_MODELO();
										   
DROP TRIGGER REGRAS_CLIENTE ON CLIENTE;
DROP FUNCTION CRIAR_CLIENTE();
										   
INSERT INTO MODELO VALUES(1,'MODELO VELHO','2011','FIAT','AZUL',15000,5);
INSERT INTO MODELO VALUES(DEFAULT,'MODELO NOVO','2011','FIAT','AZUL',15000,5);
INSERT INTO MODELO VALUES(3,'MODELO AHH','2011','FIAT','AZUL',-2000,5);
INSERT INTO MODELO VALUES(DEFAULT,'MODELO AHH','2011','FIAT','AZUL',2000,5);
SELECT * FROM MODELO
UPDATE MODELO SET DESCR='MODELO NOVO' WHERE DESCR='MODELO USADO';
															 
# CARRO => CHASSI VÁLIDA, TIPO VERIFICADO
CREATE OR REPLACE FUNCTION CRIAR_CARRO()
RETURNS TRIGGER AS $$
BEGIN
		IF (LENGTH(CAST(NEW.CHASSI AS VARCHAR))=17) THEN
			IF (NEW.TIPO='Novo' AND NEW.KILOMETRAGEM > 0) THEN
				RAISE EXCEPTION 'Não é possível';
			END IF;
				   
			RETURN NEW;	
		END IF;
													  
		RAISE EXCEPTION 'Não é possível';
END;
$$ LANGUAGE PLPGSQL;		

CREATE TRIGGER REGRAS_CARRO BEFORE INSERT OR UPDATE ON CARRO
FOR EACH ROW EXECUTE PROCEDURE CRIAR_CARRO();
				   

						
			
			
			
			